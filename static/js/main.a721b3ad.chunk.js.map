{"version":3,"sources":["App.js","theme.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","GameContainer","_templateObject2","Home","_templateObject3","Title","_templateObject4","TeamName","_templateObject5","Show","_templateObject6","App","_useState","useState","_useState2","Object","slicedToArray","show","setShow","react_default","a","createElement","hidden","id","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"goCAOA,IAAMA,EAAYC,IAAOC,IAAVC,ICPQ,WDejBC,EAAgBH,IAAOC,IAAVG,KAIbC,EAAOL,IAAOC,IAAVK,KAGJC,EAAQP,IAAOC,IAAVO,KAKLC,EAAWT,IAAOC,IAAVS,KAKRC,EAAOX,IAAOC,IAAVW,KA6BKC,EAlBH,WAAM,IAAAC,EACQC,oBAAS,GADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACHI,EADGJ,EAAA,GAEhB,OACEK,EAAAC,EAAAC,cAACxB,EAAD,KACEsB,EAAAC,EAAAC,cAAA,OAAKC,QAASL,GACZE,EAAAC,EAAAC,cAACpB,EAAD,CAAesB,GAAG,oBAElBN,GACAE,EAAAC,EAAAC,cAAClB,EAAD,KACEgB,EAAAC,EAAAC,cAAChB,EAAD,yBACAc,EAAAC,EAAAC,cAACd,EAAD,6BACAY,EAAAC,EAAAC,cAACZ,EAAD,CAAMe,QAAS,kBAAMN,GAAQ,KAA7B,WE1CUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a721b3ad.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from '@emotion/styled'\n\nimport { COLOR_1 } from 'theme'\n\nimport './App.css'\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${COLOR_1};\n`\nconst GameContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n`\nconst Home = styled.div`\n  padding: 2rem;\n`\nconst Title = styled.div`\n  font-size: 3rem;\n  font-family: 'Amatic SC', cursive;\n  text-align: center;\n`\nconst TeamName = styled.div`\n  font-size: 1.4rem;\n  font-family: 'Amatic SC', cursive;\n  text-align: center;\n`\nconst Show = styled.div`\n  font-size: 4rem;\n  font-family: 'Amatic SC', cursive;\n  text-align: center;\n  text-decoration: underline;\n  cursor: pointer;\n  &:hover {\n    opacity: 0.7;\n  }\n`\n\nconst App = () => {\n  const [show, setShow] = useState(false)\n  return (\n    <Container>\n      <div hidden={!show}>\n        <GameContainer id=\"gameContainer\" />\n      </div>\n      {!show && (\n        <Home>\n          <Title>Internet is Home</Title>\n          <TeamName>by Old Man Tea Party</TeamName>\n          <Show onClick={() => setShow(true)}>Play</Show>\n        </Home>\n      )}\n    </Container>\n  )\n}\n\nexport default App\n","export const COLOR_1 = '#FAE4CD'\nexport const COLOR_2 = '#F5C391'\nexport const COLOR_3 = '#EC8CC4'\nexport const COLOR_4 = '#995E9C'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}